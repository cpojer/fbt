/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 * @format
 * @oncall i18n_fbt_js
 */

/* eslint-disable fb-flow/use-exact-by-default-object-type */
/* eslint-disable fb-www/flow-readonly-object */
/* eslint max-len: ["warn", 120] */

/**
 * Must match babel-plugin-fbt/src/fbt-nodes/FbtNodeType.js
 * @see https://fburl.com/code/0y8sjr44
 */
enum FbtNodeType {
  Element = 'element',
  Enum = 'enum',
  ImplicitParam = 'implicitParam',
  Name = 'name',
  Param = 'param',
  Plural = 'plural',
  Pronoun = 'pronoun',
  SameParam = 'sameParam',
  Text = 'text',
}

/**
 * Must match BabelNode in flow-types/nonfb/libdef/babelTypes.js
 * @see https://fburl.com/code/m8tteo8l
 */
declare class BabelNode {}
/**
 * Must match BabelNode in flow-types/nonfb/libdef/babelTypes.js
 * @see https://fburl.com/code/d1f5wj37
 */
declare class BabelNodeJSXOpeningElement extends BabelNode {}

/**
 * Must match TableJSFBTTree in babel-plugin-fbt/src/fbt-nodes/FbtNode.js
 * @see https://fburl.com/code/hul615q3
 */
type PlainFbtNode = {|
  +children?: $ReadOnlyArray<PlainFbtNode>,
  phraseIndex?: ?number,
  type: FbtNodeType,
  wrapperNode?: ?{|
    babelNode: BabelNodeJSXOpeningElement,
    props: $ReadOnly<{ [name: string]: string | number }>,
    type: string,
  |},
|};

/**
 * Must match TableJSFBTTree in babel-plugin-standalone/src/index.js
 * @see https://fburl.com/code/cfi73b44
 */
type TableJSFBTTree =
  | {|
      desc: string,
      hash?: string,
      outerTokenName?: string,
      text: string,
      tokenAliases?: { [clearTokenName: string]: string },
    |}
  | { [key: string | number]: TableJSFBTTree };

/**
 * Summarized flow types from collectFbtPayloadFromSource() function
 * from babel-plugin-standalone/src/collectFbtForWeb.js
 * @see https://fburl.com/code/tfu110gn
 *
 * This was partially generated by using this command:
 *
 *   ```
 *   line=37
 *   col=12
 *   flow type-at-pos --expand-type-aliases --json --pretty \
 *    packages/babel-plugin-standalone/src/collectFbtForWeb.js $line $col \
 *    | jq -r .type
 *   ```
 *
 * Where `line` and `col` describe the location of the `collectFbtPayloadFromSource` function
 * in the source code.
 */
declare function collectFbtPayloadFromSource(
  source: string,
  config: {|
    generateOuterTokenName?: boolean,
    genFbtNodes: boolean,
    terse?: boolean,
  |},
  extraOptions: { [optionName: string]: boolean }
): {|
  childParentMappings: { [prop: number]: number },
  fbtElementNodes?: ?Array<{|
    +children?: $ReadOnlyArray<PlainFbtNode>,
    phraseIndex?: ?number,
    type: FbtNodeType,
    wrapperNode?: ?{|
      babelNode: BabelNodeJSXOpeningElement,
      props: $ReadOnly<{ [name: string]: string | number }>,
      type: string,
    |},
  |}>,
  phrases: Array<{|
    ...Partial<{|
      author?: ?(string | boolean | BabelNode),
      common?: ?(string | boolean | BabelNode),
      doNotExtract?: ?boolean,
      preserveWhitespace?: ?(string | boolean | BabelNode),
      project: string,
      subject?: ?(string | boolean | BabelNode),
    |}>,
    col_beg: number,
    col_end: number,
    filepath: ?string,
    line_beg: number,
    line_end: number,
    project: string,
    jsfbt: $ReadOnly<{|
      m: $ReadOnlyArray<?$ReadOnly<
        | {|
            singular?: true,
            token?: string,
            type: $PropertyType<
              {| +GENDER: 1, +NUMBER: 2, +PRONOUN: 3 |},
              'NUMBER'
            >,
          |}
        | {|
            token: string,
            type: $PropertyType<
              {| +GENDER: 1, +NUMBER: 2, +PRONOUN: 3 |},
              'GENDER'
            >,
          |}
        | {|
            type: $PropertyType<
              {| +GENDER: 1, +NUMBER: 2, +PRONOUN: 3 |},
              'PRONOUN'
            >,
          |}
        | {| range: $ReadOnlyArray<string> |}
      >>,
      t: $ReadOnly<
        | {|
            desc: string,
            hash?: string,
            outerTokenName?: string,
            text: string,
            tokenAliases?: { [clearTokenName: string]: string },
          |}
        | { [key: string | number]: TableJSFBTTree }
      >,
    |}>,
    hash_key?: string,
    hash_code?: number,
    hashToLeaf?: { [hash: string]: {| desc: string, text: string |} },
    jsfbt?: $ReadOnly<{|
      m: $ReadOnlyArray<?$ReadOnly<
        | {|
            singular?: true,
            token?: string,
            type: $PropertyType<
              {| +GENDER: 1, +NUMBER: 2, +PRONOUN: 3 |},
              'NUMBER'
            >,
          |}
        | {|
            token: string,
            type: $PropertyType<
              {| +GENDER: 1, +NUMBER: 2, +PRONOUN: 3 |},
              'GENDER'
            >,
          |}
        | {|
            type: $PropertyType<
              {| +GENDER: 1, +NUMBER: 2, +PRONOUN: 3 |},
              'PRONOUN'
            >,
          |}
        | {| range: $ReadOnlyArray<string> |}
      >>,
      t: $ReadOnly<
        | {|
            desc: string,
            hash?: string,
            outerTokenName?: string,
            text: string,
            tokenAliases?: { [clearTokenName: string]: string },
          |}
        | { [key: string | number]: TableJSFBTTree }
      >,
    |}>,
  |}>,
|};

declare module.exports: {
  collectFbtPayloadFromSource: typeof collectFbtPayloadFromSource,
};
