// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test declarative (jsx) <fbs> syntax translation should convert a common string 1`] = `
const fbs = require("fbs");
const fbsCommonElem = fbs._(
  /* __FBT__ start */ {
    jsfbt: { m: [], t: { desc: "Button to post a comment", text: "Post" } },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`Test declarative (jsx) <fbs> syntax translation should convert a simple string 1`] = `
const fbs = require("fbs");
const fbsElem = fbs._(
  /* __FBT__ start */ {
    jsfbt: { m: [], t: { desc: "str_description", text: "a simple string" } },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`Test declarative (jsx) <fbs> syntax translation should convert a string with a parameter 1`] = `
const fbs = require("fbs");
const fbsElem = fbs._(
  /* __FBT__ start */ {
    jsfbt: {
      m: [],
      t: { desc: "str_description", text: "a string with a {param name}" },
    },
    project: "",
  } /* __FBT__ end */,
  [fbs._param("param name", parameter)]
);

`;

exports[`Test declarative (jsx) <fbs> syntax translation should handle <fbs:enum> 1`] = `
const fbs = require("fbs");
let aEnum = require("Test$FbtEnum");
var x = fbs._(
  /* __FBT__ start */ {
    jsfbt: {
      m: [null],
      t: {
        id1: { desc: "enums!", text: "Click to see groups" },
        id2: { desc: "enums!", text: "Click to see photos" },
        id3: { desc: "enums!", text: "Click to see videos" },
      },
    },
    project: "",
  } /* __FBT__ end */,
  [fbs._enum(id, aEnum)]
);

`;

exports[`Test functional fbs() syntax translation should convert a common string 1`] = `
const fbs = require("fbs");
const fbsCommonCall = fbs._(
  /* __FBT__ start */ {
    jsfbt: { m: [], t: { desc: "Button to post a comment", text: "Post" } },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`Test functional fbs() syntax translation should convert a simple string 1`] = `
const fbs = require("fbs");
const fbsCall = fbs._(
  /* __FBT__ start */ {
    jsfbt: { m: [], t: { desc: "str_description", text: "a simple string" } },
    project: "",
  } /* __FBT__ end */
);

`;

exports[`Test functional fbs() syntax translation should convert a string with a gender parameter 1`] = `
const fbs = require("fbs");
const IntlVariations = require("IntlVariations");
const fbsCall = fbs._(
  /* __FBT__ start */ {
    jsfbt: {
      m: [{ token: "param name", type: 1 }],
      t: {
        "*": { desc: "str_description", text: "a string with a {param name}" },
      },
    },
    project: "",
  } /* __FBT__ end */,
  [fbs._param("param name", parameter, [1, IntlVariations.GENDER_MALE])]
);

`;

exports[`Test functional fbs() syntax translation should handle fbs.enum 1`] = `
const fbs = require("fbs");
let aEnum = require("Test$FbtEnum");
var x = fbs._(
  /* __FBT__ start */ {
    jsfbt: {
      m: [null],
      t: {
        id1: { desc: "enums!", text: "Click to see groups" },
        id2: { desc: "enums!", text: "Click to see photos" },
        id3: { desc: "enums!", text: "Click to see videos" },
      },
    },
    project: "",
  } /* __FBT__ end */,
  [fbs._enum(id, aEnum)]
);

`;
